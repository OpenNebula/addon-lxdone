#!/usr/bin/python

# -------------------------------------------------------------------------- #
# Copyright 2016-2018                                                        #
#                                                                            #
# Portions copyright OpenNebula Project (OpenNebula.org), CG12 Labs          #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

import lxd_common as lc
t0 = lc.time()
from base64 import b64decode
import tempfile

DOMAIN = lc.sys.argv[1]  # Domain name: one-101
SOURCE = lc.sys.argv[2]  # Image path
TARGET = lc.sys.argv[3]  # Device in the guest: hda, sdc, vda, xvdc
TARGET_INDEX = lc.sys.argv[4]  # Position in the list of disks
# action xml. Base: /VMM_DRIVER_ACTION_DATA/VM/TEMPLATE/DISK[ATTACH='YES']
DRV_ACTION = lc.sys.argv[5]
VM_ID = lc.sys.argv[6]


def xml_attach_disk_get(xml64, file_location):
    "Returns a container template after being hot attached with a disk"

    xml_content = b64decode(xml64)

    tmp_xml_file, file_path = tempfile.mkstemp()
    with lc.os.fdopen(tmp_xml_file, 'w') as open_file:
        open_file.write(xml_content)
        open_file.close()

    tree = lc.ET.parse(file_path)
    lc.os.unlink(file_path)

    root = tree.getroot()
    vm_template = root.find('VM')
    tree._setroot(vm_template)
    tree.write(file_location)

    return lc.xml_start(file_location)


client = lc.Client()
container = client.containers.get(DOMAIN)

lc.log_function(lc.separator)

# attach disk xml reading

old_xml = lc.xml_start(container.config['user.xml'])
DS_ID = old_xml["/VM/HISTORY_RECORDS/HISTORY/DS_ID"][0]

xml_location = '%s/%s/%s/post_attach_disk_xml' % (lc.datastores, DS_ID, VM_ID)
xml = xml_attach_disk_get(DRV_ACTION, xml_location)

TARGET_INDEX = int(TARGET_INDEX) - 1
disk_data = {'DISK_ID': "", 'DISK_TYPE': "", 'SOURCE': "", 'CLONE': ""}

for x in disk_data:
    disk_data[x] = lc.xml_query_list(
        lc.xml_pre + "DISK/" + x, xml)[TARGET_INDEX]


# Disk mapping
host_device = lc.storage_sysmap(disk_data["DISK_ID"], disk_data["DISK_TYPE"],
                                disk_data["SOURCE"], VM_ID, DS_ID, disk_data["CLONE"])

disk_config = lc.map_disk(TARGET, host_device)
xml_config = lc.map_xml(xml_location)

try:
    container.devices.update(disk_config)
    container.config.update(xml_config)
    container.save(wait=True)
except lc.LXDAPIException as lxdapie:
    lc.log_function(lxdapie, 'e')
    lc.storage_sysunmap(disk_data["DISK_TYPE"], host_device)
    lc.sys.exit(1)

lc.log_function("Attached disk with ID %s" % (TARGET_INDEX+1))
lc.clock(t0)
lc.sys.exit(0)
